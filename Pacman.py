# Pacman.py


################################################################################
#                                                                              #
#                      Classe "Pacman" pour le jeu PACMAN                      #
#                                                                              #
################################################################################


# Ce fichier contient la classe m√®re "Pacman" qui cr√©er un personnage contr√¥lable
# par le joueur.
# Un Pacman a une position de d√©part et un statut.
# La m√©thode "move()" d√©finit le d√©placement des Pacmans
# Les sous-classes "NicePacman" et "BadPacman" h√©ritent de leur classe m√®re.
# Tous deux ont une jauge diff√©rente lors de l'instantiation.
# La m√©thode "eat()" d√©finit les conditions pour manger un bonbon pour chaque personnage.
# La m√©thode "is_dead()" d√©finit les conditions de mort pour chaque personnage.
# La m√©thode "show_parameters()" affiche les param√®tres relatifs √† chaque personnage.

class Pacman():
    """
    Classe pour Pacman

    ...
    
    Attribus
    ----------
    position : list (x;y)
        Renseigne les coordonn√©es matricielles du pacman sur le terrain de jeu
    pacmanstate : bool
        Indique l'√©tat du pacman au cours de la partie (mort = False, Vivan = True)
    
    Methodes
    -------
    move :
        Initie le d√©placement du pacman jou√© en renvoie sa nouvelle position
    """    

    def __init__(self, position, pacmanstate):
        """
        Initialise les caract√©ristiques du pacman jou√© avec une jauge et une position

        Parameters
        ----------
        position : list (x;y)
            Renseigne les coordonn√©es matricielles du pacman sur le terrain de jeu
        pacmanstate : bool
            Indique l'√©tat du pacman au cours de la partie (mort = False, Vivan = True)

        """
        self.position = position      
        self.pacmanstate = pacmanstate
        
    def move(self):
        """
        Initie le d√©placement du pacman jou√© et renvoie sa nouvelle position
        Affiche la nouvelle position du joueur sur le terrain

        """
        moving = input("Pour te d√©placer, appuie sur Q pour aller √† gauche, D pour la droite, Z en haut, S en bas \n > ")
        if moving == "s":
            self.position[0] += 1
        elif moving == "z":
            self.position[0] -= 1
        elif moving == "q":
            self.position[1] -= 1
        elif moving == "d":
            self.position[1] += 1
        print (self.position)


######################################################################
#                      sous-classe "NicePacman"                      #
######################################################################

class NicePacman(Pacman):
    """
    Sous-classe pour le joueur incarnant le Pacman "NicePacman"
    Modifie le nombre de points de jauge au d√©part de la partie,
    la mani√®re de perdre le jeu et les cons√©quences de l'action de manger un bonbon.
    
    Pour le NicePacman :
    Jauge de d√©part : 0 point
    Manger un bonbon : jauge + 5 ou + 10 points
    Etre mang√© par l'autre joueur BadPacman : perte de la partie

    ...
    
    Attribus
    ----------
    position : list
        Renseigne les coordonn√©es matricielles du pacman sur le terrain de jeu
    pacmanstate : bool
        Indique l'√©tat du pacman au cours de la partie
    jaugepleine : bool
        Indique si oui ou non la jauge du pacman jou√© est pleine
    jauge : int
        Renseigne le nombre (entier) de points score du pacman jou√©
    
    M√©thodes
    -------
    eat :
        Initialise l'action de manger du pacman jou√©.
        Ajoute un certain nombre de points relatif
        √† la puissance du bonbon mang√© √† la jauge du joueur.
        
    is_dead :
        Conclue sur la mort ou non du pacman jou√©.
        
    show_parameters :
        Affiche les caract√©ristiques du pacman jou√© (jauge, position).

    """   

    def __init__(self, position, pacmanstate, jauge=0):
        """
        Initialise les caract√©ristiques du nicepacman jou√©.

        Param√®tres
        ----------
        position : list
            Renseigne les coordonn√©es matricielles du pacman sur le terrain de jeu.
        pacmanstate : bool
            Indique l'√©tat du pacman au cours de la partie.
        jauge : int
            Initialise √† 0 le nombre de points score du pacman jou√©.

        """
        Pacman.__init__(self, position, pacmanstate)
        self.jauge = jauge
        self.jaugepleine = False

    def eat (self, bonbon, nicepacman):
        """
        Initialise l'action de manger du nicepacman jou√©.
        Ajoute un certain nombre de points (5 ou 10) relatif
        √† la puissance du bonbon mang√© √† la jauge du joueur.
        
        Parameters
        ----------
        bonbon : objet
            Correspond √† un candy sur le terrain.
        nicepacman : objet
            Correspond au personnage NicePacman instanci√© donn√© √† la m√©thode meet, appel√©e dans la m√©thode eat.
        
        """             
        if bonbon.meet_pacman(nicepacman) == True :
            self.jauge += bonbon.power
            print ('üçíüßÅ Yummy ! üçíüßÅ')
        print ("Nice üü°, ta jauge est √† : ", self.jauge)
        
    def is_dead(self, badpacman):
        """
        Conclue sur la mort du NicePacman jou√©. Lorsqu'il atteint la m√™me
        position que l'autre joueur BadPacman, le joueur NicePacman meurt et
        perd la partie.
        
        Parameters
        ----------
        badpacman : objet
            Correspond au personnage BadPacman instanci√©. 
        
        Retourne
        -------
        pacman state : bool
            Indique si oui ou non le NicePacman jou√© est mort.

        """
        
        if badpacman.position == self.position:
            print("Oupsi, tu as perdu üò≠ ! Tu t'es fait mang√© par le m√©chant!")
            self.pacmanstate = False 
            return self.pacmanstate
        else:
            print(self.jauge)

    def show_parameters(self):
        
        """
        Affiche les caract√©ristiques du nicepacman jou√© (jauge, position).

        """
        print ("Param√®tres Nice üü° : \n >")
        print(self.jauge)
        print(self.position)


######################################################################
#                      sous-classe "BadPacman"                      #
######################################################################

class BadPacman(Pacman):
    """
    Sous-classe pour le joueur incarnant le Pacman "BadPacman".
    Modifie le nombre de points de jauge au d√©part de la partie,
    la mani√®re de perdre le jeu et les cons√©quences de l'action de manger un bonbon.
    
    Pour le BadPacman :
    Jauge de d√©part : 100 points
    Manger un bonbon : jauge - 5 ou - 10 points
    Jauge √† 0 point : perte de la partie

    ...
    
    Attribus
    ----------
    position : list
        Renseigne les coordonn√©es matricielles du pacman jou√© sur le terrain de jeu
    pacmanstate : bool
        Indique l'√©tat du pacman au cours de la partie
    jauge : int
        Renseigne le nombre (entier) de points score du pacman jou√©
        
    M√©thodes
    -------
    eat :
        Initialise l'action de manger du pacman jou√©.
        Retire un certain nombre de points relatifs
        √† la puissance du bonbon mang√© √† la jauge du joueur.
        
    is_dead :
        Conclue sur la mort du pacman jou√©.
        
    show_parameters :
        Affiche les caract√©ristiques du pacman jou√© (jauge, position).

    """ 
    
    def __init__(self, position, pacmanstate, jauge=100): 
        """
        Initialise les caract√©ristiques du pacman jou√©.

        Parameters
        ----------
        position : list
            Renseigne les coordonn√©es matricielles du pacman sur le terrain de jeu.
        pacmanstate : bool
            Indique l'√©tat du pacman au cours de la partie.
        jauge : int
            Initialise √† 100 le nombre de points score du pacman jou√©.

        """
        Pacman.__init__(self, position, pacmanstate)
        self.jauge = jauge

    def eat(self, bonbon, badpacman):
   
        """
        Initialise l'action de manger du pacman jou√©.
        Retire un certain nombre de points (5 ou 10) relatif
        √† la puissance du bonbon mang√© √† la jauge du joueur.
        
        Param√®tres
        ----------
        bonbon : objet
            Correspond √† un candy instanci√©.
        badpacman : objet
            Correspond au personnage BadPacman instanci√© dont la m√©thode meet, appel√©e dans cette m√©thode eat a besoin.
        
        """         
        if bonbon.meet_pacman(badpacman) == True:
            self.jauge -= bonbon.power
            print ('üçíüßÅ A√Øe a√Øe a√Øe! üçíüßÅ')
        print ("Bad üî¥, ta jauge est √† : ", self.jauge)

    def is_dead(self, nicepacman):
        """
        Conclue sur la mort du BadPacman jou√©. Lorsqu'il atteint une jauge
        de 0 point, le BadPacman meurt et perd la partie.

        Param√®tres
        ----------
        nicepacman : objet
            Correspond au personnage NicePacman.
        
        Retours
        -------
        pacmanstate : bool
            Indique si oui ou non le BadPacman jou√© est mort.

        """
        if self.jauge == 0:
            print("Oupsi, tu as perdu üò≠ ! Tu n'as plus de point !")
            self.pacmanstate = False
            return self.pacmanstate
        else:
            print(self.jauge)             

    def show_parameters(self):
        """
        Affiche les caract√©ristiques du badpacman jou√© (jauge, position).

        """
        print ("Param√®tres Bad üî¥ : \n >")
        print(self.jauge)
        print(self.position)

#-----------------------------------------------------------------------------
# Test
#np = NicePacman([4,7])
#bp = BadPacman([2,1])

#np.show_parameters()
#bp.show_parameters()